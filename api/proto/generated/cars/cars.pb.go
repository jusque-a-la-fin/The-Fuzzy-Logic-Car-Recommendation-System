// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v4.25.3
// source: cars.proto

package cars

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Перечисление для позиции руля
type SteeringWheelPosition int32

const (
	SteeringWheelPosition_LEFT_POS      SteeringWheelPosition = 0
	SteeringWheelPosition_RIGHT_POS     SteeringWheelPosition = 1
	SteeringWheelPosition_UNDEFINED_POS SteeringWheelPosition = 2
)

// Enum value maps for SteeringWheelPosition.
var (
	SteeringWheelPosition_name = map[int32]string{
		0: "LEFT_POS",
		1: "RIGHT_POS",
		2: "UNDEFINED_POS",
	}
	SteeringWheelPosition_value = map[string]int32{
		"LEFT_POS":      0,
		"RIGHT_POS":     1,
		"UNDEFINED_POS": 2,
	}
)

func (x SteeringWheelPosition) Enum() *SteeringWheelPosition {
	p := new(SteeringWheelPosition)
	*p = x
	return p
}

func (x SteeringWheelPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SteeringWheelPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_cars_proto_enumTypes[0].Descriptor()
}

func (SteeringWheelPosition) Type() protoreflect.EnumType {
	return &file_cars_proto_enumTypes[0]
}

func (x SteeringWheelPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SteeringWheelPosition.Descriptor instead.
func (SteeringWheelPosition) EnumDescriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{0}
}

// Перечисление для типа усилителя руля
type PowerSteering int32

const (
	PowerSteering_ELECTRIC_PS         PowerSteering = 0
	PowerSteering_ELECTROHYDRAULIC_PS PowerSteering = 1
	PowerSteering_HYDRAULIC_PS        PowerSteering = 2
	PowerSteering_NO_PS               PowerSteering = 3
	PowerSteering_UNDEFINED_PS        PowerSteering = 4
)

// Enum value maps for PowerSteering.
var (
	PowerSteering_name = map[int32]string{
		0: "ELECTRIC_PS",
		1: "ELECTROHYDRAULIC_PS",
		2: "HYDRAULIC_PS",
		3: "NO_PS",
		4: "UNDEFINED_PS",
	}
	PowerSteering_value = map[string]int32{
		"ELECTRIC_PS":         0,
		"ELECTROHYDRAULIC_PS": 1,
		"HYDRAULIC_PS":        2,
		"NO_PS":               3,
		"UNDEFINED_PS":        4,
	}
)

func (x PowerSteering) Enum() *PowerSteering {
	p := new(PowerSteering)
	*p = x
	return p
}

func (x PowerSteering) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerSteering) Descriptor() protoreflect.EnumDescriptor {
	return file_cars_proto_enumTypes[1].Descriptor()
}

func (PowerSteering) Type() protoreflect.EnumType {
	return &file_cars_proto_enumTypes[1]
}

func (x PowerSteering) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerSteering.Descriptor instead.
func (PowerSteering) EnumDescriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{1}
}

// Перечисление для наличия опции
type Availability int32

const (
	Availability_YES_VALUE       Availability = 0
	Availability_NO_VALUE        Availability = 1
	Availability_OPTION_VALUE    Availability = 2
	Availability_UNDEFINED_VALUE Availability = 3
)

// Enum value maps for Availability.
var (
	Availability_name = map[int32]string{
		0: "YES_VALUE",
		1: "NO_VALUE",
		2: "OPTION_VALUE",
		3: "UNDEFINED_VALUE",
	}
	Availability_value = map[string]int32{
		"YES_VALUE":       0,
		"NO_VALUE":        1,
		"OPTION_VALUE":    2,
		"UNDEFINED_VALUE": 3,
	}
)

func (x Availability) Enum() *Availability {
	p := new(Availability)
	*p = x
	return p
}

func (x Availability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Availability) Descriptor() protoreflect.EnumDescriptor {
	return file_cars_proto_enumTypes[2].Descriptor()
}

func (Availability) Type() protoreflect.EnumType {
	return &file_cars_proto_enumTypes[2]
}

func (x Availability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Availability.Descriptor instead.
func (Availability) EnumDescriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{2}
}

// Car - автомобиль
type Car struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// FullName - название
	FullName string `protobuf:"bytes,2,opt,name=FullName,proto3" json:"FullName,omitempty"`
	// Description - описание
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Generation - название поколения
	Generation string `protobuf:"bytes,4,opt,name=Generation,proto3" json:"Generation,omitempty"`
	// Trimlevel - название комплектации
	TrimLevel string `protobuf:"bytes,5,opt,name=TrimLevel,proto3" json:"TrimLevel,omitempty"`
	// Specifications - технические характеристики
	Specs *Specifications `protobuf:"bytes,6,opt,name=Specs,proto3" json:"Specs,omitempty"`
	// Features - опции
	Features *Features `protobuf:"bytes,7,opt,name=Features,proto3" json:"Features,omitempty"`
	// Offering - сведения для покупателя
	Offering *Offering `protobuf:"bytes,8,opt,name=Offering,proto3" json:"Offering,omitempty"`
}

func (x *Car) Reset() {
	*x = Car{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Car) ProtoMessage() {}

func (x *Car) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Car.ProtoReflect.Descriptor instead.
func (*Car) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{0}
}

func (x *Car) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Car) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Car) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Car) GetGeneration() string {
	if x != nil {
		return x.Generation
	}
	return ""
}

func (x *Car) GetTrimLevel() string {
	if x != nil {
		return x.TrimLevel
	}
	return ""
}

func (x *Car) GetSpecs() *Specifications {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *Car) GetFeatures() *Features {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Car) GetOffering() *Offering {
	if x != nil {
		return x.Offering
	}
	return nil
}

// Specifications - технические характеристики
type Specifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body - тип кузова
	Body string `protobuf:"bytes,1,opt,name=Body,proto3" json:"Body,omitempty"`
	// Length - длина, мм
	Length float64 `protobuf:"fixed64,2,opt,name=Length,proto3" json:"Length,omitempty"`
	// Width - ширина, мм
	Width float64 `protobuf:"fixed64,3,opt,name=Width,proto3" json:"Width,omitempty"`
	// Height - высота, мм
	Height float64 `protobuf:"fixed64,4,opt,name=Height,proto3" json:"Height,omitempty"`
	// GroundClearance - клиренс, мм
	GroundClearance float64 `protobuf:"fixed64,5,opt,name=GroundClearance,proto3" json:"GroundClearance,omitempty"`
	// DragCoefficient - коэффициент аэродинамического сопротивления, cW
	DragCoefficient float64 `protobuf:"fixed64,6,opt,name=DragCoefficient,proto3" json:"DragCoefficient,omitempty"`
	// FrontTrackWidth - ширина передней колеи, мм
	FrontTrackWidth float64 `protobuf:"fixed64,7,opt,name=FrontTrackWidth,proto3" json:"FrontTrackWidth,omitempty"`
	// BackTrackWidth - ширина задней колеи, мм"
	BackTrackWidth float64 `protobuf:"fixed64,8,opt,name=BackTrackWidth,proto3" json:"BackTrackWidth,omitempty"`
	// Wheelbase - колесная база, мм
	Wheelbase float64 `protobuf:"fixed64,9,opt,name=Wheelbase,proto3" json:"Wheelbase,omitempty"`
	// Acceleration0To100 - время разгона 0-100 км/ч, с
	Acceleration0To100 float64 `protobuf:"fixed64,10,opt,name=Acceleration0To100,proto3" json:"Acceleration0To100,omitempty"`
	// MaxSpeed - максимальная скорость, км/ч
	MaxSpeed float64 `protobuf:"fixed64,11,opt,name=MaxSpeed,proto3" json:"MaxSpeed,omitempty"`
	// CityFuelConsumption - расход топлива в городском цикле, л/100 км
	CityFuelConsumption float64 `protobuf:"fixed64,12,opt,name=CityFuelConsumption,proto3" json:"CityFuelConsumption,omitempty"`
	// HighwayFuelConsumption - расход топлива за городом, л/100 км
	HighwayFuelConsumption float64 `protobuf:"fixed64,13,opt,name=HighwayFuelConsumption,proto3" json:"HighwayFuelConsumption,omitempty"`
	// MixedFuelConsumption - расход топлива в смешанном цикле, л/100 км
	MixedFuelConsumption float64 `protobuf:"fixed64,14,opt,name=MixedFuelConsumption,proto3" json:"MixedFuelConsumption,omitempty"`
	// NumberOfSeats - число мест
	NumberOfSeats int32 `protobuf:"varint,15,opt,name=NumberOfSeats,proto3" json:"NumberOfSeats,omitempty"`
	// TrunkVolume - объем багажника, литры
	TrunkVolume float64 `protobuf:"fixed64,16,opt,name=TrunkVolume,proto3" json:"TrunkVolume,omitempty"`
	// Mass - масса, кг
	Mass float64 `protobuf:"fixed64,17,opt,name=Mass,proto3" json:"Mass,omitempty"`
	// Gearbox - тип трансмиссии
	Gearbox string `protobuf:"bytes,18,opt,name=Gearbox,proto3" json:"Gearbox,omitempty"`
	// Drive - тип привода
	Drive string `protobuf:"bytes,19,opt,name=Drive,proto3" json:"Drive,omitempty"`
	// CrashTestEstimate - баллы за краш-тест
	CrashTestEstimate float64 `protobuf:"fixed64,20,opt,name=CrashTestEstimate,proto3" json:"CrashTestEstimate,omitempty"`
	// Engine - двигатель
	Engine *Engine `protobuf:"bytes,21,opt,name=Engine,proto3" json:"Engine,omitempty"`
	// SteeringWheel - рулевое колесо
	SteeringWheel *SteeringWheel `protobuf:"bytes,22,opt,name=SteeringWheel,proto3" json:"SteeringWheel,omitempty"`
	// Suspension - подвеска
	Suspension *Suspension `protobuf:"bytes,23,opt,name=Suspension,proto3" json:"Suspension,omitempty"`
	// Brakes - тормоза
	Brakes *Brakes `protobuf:"bytes,24,opt,name=Brakes,proto3" json:"Brakes,omitempty"`
	// Tires - шины
	Tires *Tires `protobuf:"bytes,25,opt,name=Tires,proto3" json:"Tires,omitempty"`
}

func (x *Specifications) Reset() {
	*x = Specifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specifications) ProtoMessage() {}

func (x *Specifications) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specifications.ProtoReflect.Descriptor instead.
func (*Specifications) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{1}
}

func (x *Specifications) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Specifications) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Specifications) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Specifications) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Specifications) GetGroundClearance() float64 {
	if x != nil {
		return x.GroundClearance
	}
	return 0
}

func (x *Specifications) GetDragCoefficient() float64 {
	if x != nil {
		return x.DragCoefficient
	}
	return 0
}

func (x *Specifications) GetFrontTrackWidth() float64 {
	if x != nil {
		return x.FrontTrackWidth
	}
	return 0
}

func (x *Specifications) GetBackTrackWidth() float64 {
	if x != nil {
		return x.BackTrackWidth
	}
	return 0
}

func (x *Specifications) GetWheelbase() float64 {
	if x != nil {
		return x.Wheelbase
	}
	return 0
}

func (x *Specifications) GetAcceleration0To100() float64 {
	if x != nil {
		return x.Acceleration0To100
	}
	return 0
}

func (x *Specifications) GetMaxSpeed() float64 {
	if x != nil {
		return x.MaxSpeed
	}
	return 0
}

func (x *Specifications) GetCityFuelConsumption() float64 {
	if x != nil {
		return x.CityFuelConsumption
	}
	return 0
}

func (x *Specifications) GetHighwayFuelConsumption() float64 {
	if x != nil {
		return x.HighwayFuelConsumption
	}
	return 0
}

func (x *Specifications) GetMixedFuelConsumption() float64 {
	if x != nil {
		return x.MixedFuelConsumption
	}
	return 0
}

func (x *Specifications) GetNumberOfSeats() int32 {
	if x != nil {
		return x.NumberOfSeats
	}
	return 0
}

func (x *Specifications) GetTrunkVolume() float64 {
	if x != nil {
		return x.TrunkVolume
	}
	return 0
}

func (x *Specifications) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *Specifications) GetGearbox() string {
	if x != nil {
		return x.Gearbox
	}
	return ""
}

func (x *Specifications) GetDrive() string {
	if x != nil {
		return x.Drive
	}
	return ""
}

func (x *Specifications) GetCrashTestEstimate() float64 {
	if x != nil {
		return x.CrashTestEstimate
	}
	return 0
}

func (x *Specifications) GetEngine() *Engine {
	if x != nil {
		return x.Engine
	}
	return nil
}

func (x *Specifications) GetSteeringWheel() *SteeringWheel {
	if x != nil {
		return x.SteeringWheel
	}
	return nil
}

func (x *Specifications) GetSuspension() *Suspension {
	if x != nil {
		return x.Suspension
	}
	return nil
}

func (x *Specifications) GetBrakes() *Brakes {
	if x != nil {
		return x.Brakes
	}
	return nil
}

func (x *Specifications) GetTires() *Tires {
	if x != nil {
		return x.Tires
	}
	return nil
}

// Engine - двигатель
type Engine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FuelUsed - используемое топливо
	FuelUsed string `protobuf:"bytes,1,opt,name=FuelUsed,proto3" json:"FuelUsed,omitempty"`
	// EngineType - тип двигателя
	EngineType string `protobuf:"bytes,2,opt,name=EngineType,proto3" json:"EngineType,omitempty"`
	// Capacity - объем двигателя, куб.см
	Capacity float64 `protobuf:"fixed64,3,opt,name=Capacity,proto3" json:"Capacity,omitempty"`
	// MaxPower - максимальная мощность, л.с.
	MaxPower float64 `protobuf:"fixed64,4,opt,name=MaxPower,proto3" json:"MaxPower,omitempty"`
	// MaxTorque - максимальный крутящий момент, Н*м (кг*м) при об./мин.
	MaxTorque string `protobuf:"bytes,5,opt,name=MaxTorque,proto3" json:"MaxTorque,omitempty"`
}

func (x *Engine) Reset() {
	*x = Engine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Engine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Engine) ProtoMessage() {}

func (x *Engine) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Engine.ProtoReflect.Descriptor instead.
func (*Engine) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{2}
}

func (x *Engine) GetFuelUsed() string {
	if x != nil {
		return x.FuelUsed
	}
	return ""
}

func (x *Engine) GetEngineType() string {
	if x != nil {
		return x.EngineType
	}
	return ""
}

func (x *Engine) GetCapacity() float64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Engine) GetMaxPower() float64 {
	if x != nil {
		return x.MaxPower
	}
	return 0
}

func (x *Engine) GetMaxTorque() string {
	if x != nil {
		return x.MaxTorque
	}
	return ""
}

// SteeringWheel - рулевое колесо
type SteeringWheel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SteeringWheelPosition - положение руля(слева, справа и по центру)
	SteeringWheelPosition SteeringWheelPosition `protobuf:"varint,1,opt,name=SteeringWheelPosition,proto3,enum=cars.SteeringWheelPosition" json:"SteeringWheelPosition,omitempty"`
	// PowerSteering - тип усилителя рулевого управления
	PowerSteering PowerSteering `protobuf:"varint,2,opt,name=PowerSteering,proto3,enum=cars.PowerSteering" json:"PowerSteering,omitempty"`
}

func (x *SteeringWheel) Reset() {
	*x = SteeringWheel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteeringWheel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteeringWheel) ProtoMessage() {}

func (x *SteeringWheel) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteeringWheel.ProtoReflect.Descriptor instead.
func (*SteeringWheel) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{3}
}

func (x *SteeringWheel) GetSteeringWheelPosition() SteeringWheelPosition {
	if x != nil {
		return x.SteeringWheelPosition
	}
	return SteeringWheelPosition_LEFT_POS
}

func (x *SteeringWheel) GetPowerSteering() PowerSteering {
	if x != nil {
		return x.PowerSteering
	}
	return PowerSteering_ELECTRIC_PS
}

// Suspension - подвеска
type Suspension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FrontStabilizer - наличие переднего стабилизатора
	FrontStabilizer Availability `protobuf:"varint,1,opt,name=FrontStabilizer,proto3,enum=cars.Availability" json:"FrontStabilizer,omitempty"`
	// BackStabilizer - наличие заднего стабилизатора
	BackStabilizer Availability `protobuf:"varint,2,opt,name=BackStabilizer,proto3,enum=cars.Availability" json:"BackStabilizer,omitempty"`
	// FrontSuspension - название типа передней подвески
	FrontSuspension string `protobuf:"bytes,3,opt,name=FrontSuspension,proto3" json:"FrontSuspension,omitempty"`
	// BackSuspension - название типа задней подвески
	BackSuspension string `protobuf:"bytes,4,opt,name=BackSuspension,proto3" json:"BackSuspension,omitempty"`
}

func (x *Suspension) Reset() {
	*x = Suspension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Suspension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suspension) ProtoMessage() {}

func (x *Suspension) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suspension.ProtoReflect.Descriptor instead.
func (*Suspension) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{4}
}

func (x *Suspension) GetFrontStabilizer() Availability {
	if x != nil {
		return x.FrontStabilizer
	}
	return Availability_YES_VALUE
}

func (x *Suspension) GetBackStabilizer() Availability {
	if x != nil {
		return x.BackStabilizer
	}
	return Availability_YES_VALUE
}

func (x *Suspension) GetFrontSuspension() string {
	if x != nil {
		return x.FrontSuspension
	}
	return ""
}

func (x *Suspension) GetBackSuspension() string {
	if x != nil {
		return x.BackSuspension
	}
	return ""
}

// Brakes - тормоза
type Brakes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FrontBrakes - тип передних тормозов
	FrontBrakes string `protobuf:"bytes,1,opt,name=FrontBrakes,proto3" json:"FrontBrakes,omitempty"`
	// BackBrakes - тип задних тормозов
	BackBrakes string `protobuf:"bytes,2,opt,name=BackBrakes,proto3" json:"BackBrakes,omitempty"`
	// ParkingBrake - тип стояночного тормоза
	ParkingBrake string `protobuf:"bytes,3,opt,name=ParkingBrake,proto3" json:"ParkingBrake,omitempty"`
}

func (x *Brakes) Reset() {
	*x = Brakes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Brakes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Brakes) ProtoMessage() {}

func (x *Brakes) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Brakes.ProtoReflect.Descriptor instead.
func (*Brakes) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{5}
}

func (x *Brakes) GetFrontBrakes() string {
	if x != nil {
		return x.FrontBrakes
	}
	return ""
}

func (x *Brakes) GetBackBrakes() string {
	if x != nil {
		return x.BackBrakes
	}
	return ""
}

func (x *Brakes) GetParkingBrake() string {
	if x != nil {
		return x.ParkingBrake
	}
	return ""
}

// Tires - шины
type Tires struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FrontTiresWidth - ширина передних шин, мм
	FrontTiresWidth int32 `protobuf:"varint,1,opt,name=FrontTiresWidth,proto3" json:"FrontTiresWidth,omitempty"`
	// BackTiresWidth - ширина задних шин, мм
	BackTiresWidth int32 `protobuf:"varint,2,opt,name=BackTiresWidth,proto3" json:"BackTiresWidth,omitempty"`
	// FrontTiresAspectRatio - процентное соотношение высоты профиля передних шин к их ширине
	FrontTiresAspectRatio int32 `protobuf:"varint,3,opt,name=FrontTiresAspectRatio,proto3" json:"FrontTiresAspectRatio,omitempty"`
	// BackTiresAspectRatio - процентное соотношение высоты профиля задних шин к их ширине
	BackTiresAspectRatio int32 `protobuf:"varint,4,opt,name=BackTiresAspectRatio,proto3" json:"BackTiresAspectRatio,omitempty"`
	// FrontTiresRimDiameter - диаметр обода передних шин, мм
	FrontTiresRimDiameter int32 `protobuf:"varint,5,opt,name=FrontTiresRimDiameter,proto3" json:"FrontTiresRimDiameter,omitempty"`
	// BackTiresRimDiameter - диаметр обода задних шин, мм
	BackTiresRimDiameter int32 `protobuf:"varint,6,opt,name=BackTiresRimDiameter,proto3" json:"BackTiresRimDiameter,omitempty"`
}

func (x *Tires) Reset() {
	*x = Tires{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tires) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tires) ProtoMessage() {}

func (x *Tires) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tires.ProtoReflect.Descriptor instead.
func (*Tires) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{6}
}

func (x *Tires) GetFrontTiresWidth() int32 {
	if x != nil {
		return x.FrontTiresWidth
	}
	return 0
}

func (x *Tires) GetBackTiresWidth() int32 {
	if x != nil {
		return x.BackTiresWidth
	}
	return 0
}

func (x *Tires) GetFrontTiresAspectRatio() int32 {
	if x != nil {
		return x.FrontTiresAspectRatio
	}
	return 0
}

func (x *Tires) GetBackTiresAspectRatio() int32 {
	if x != nil {
		return x.BackTiresAspectRatio
	}
	return 0
}

func (x *Tires) GetFrontTiresRimDiameter() int32 {
	if x != nil {
		return x.FrontTiresRimDiameter
	}
	return 0
}

func (x *Tires) GetBackTiresRimDiameter() int32 {
	if x != nil {
		return x.BackTiresRimDiameter
	}
	return 0
}

// Features - опции
type Features struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SafetyAndMotionControlSystems - электронные системы безопасности и контроля движения
	SafetyAndMotionControlSystem *SafetyAndMotionControlSystems `protobuf:"bytes,1,opt,name=SafetyAndMotionControlSystem,proto3" json:"SafetyAndMotionControlSystem,omitempty"`
	// Lights - фонари и фары
	Lights *Lights `protobuf:"bytes,2,opt,name=Lights,proto3" json:"Lights,omitempty"`
	// Interior- интерьер
	Interior *Interior `protobuf:"bytes,3,opt,name=Interior,proto3" json:"Interior,omitempty"`
	// CabinMicroclimate - микроклимат салона
	CabinMicroclimate *CabinMicroclimate `protobuf:"bytes,4,opt,name=CabinMicroclimate,proto3" json:"CabinMicroclimate,omitempty"`
	// ElectricOptions - пакет электрических опций
	ElectricOptions *SetOfElectricOptions `protobuf:"bytes,5,opt,name=ElectricOptions,proto3" json:"ElectricOptions,omitempty"`
	// Airbags - подушки безопасности
	Airbags *SetOfAirbags `protobuf:"bytes,6,opt,name=Airbags,proto3" json:"Airbags,omitempty"`
	// MultimediaSystem - системы мультимедиа
	MultimediaSystems *MultimediaSystems `protobuf:"bytes,7,opt,name=MultimediaSystems,proto3" json:"MultimediaSystems,omitempty"`
	// CarAlarm - наличие сигнализации
	CarAlarm Availability `protobuf:"varint,8,opt,name=CarAlarm,proto3,enum=cars.Availability" json:"CarAlarm,omitempty"`
	// Color - цвет
	Color string `protobuf:"bytes,9,opt,name=Color,proto3" json:"Color,omitempty"`
}

func (x *Features) Reset() {
	*x = Features{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features) ProtoMessage() {}

func (x *Features) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features.ProtoReflect.Descriptor instead.
func (*Features) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{7}
}

func (x *Features) GetSafetyAndMotionControlSystem() *SafetyAndMotionControlSystems {
	if x != nil {
		return x.SafetyAndMotionControlSystem
	}
	return nil
}

func (x *Features) GetLights() *Lights {
	if x != nil {
		return x.Lights
	}
	return nil
}

func (x *Features) GetInterior() *Interior {
	if x != nil {
		return x.Interior
	}
	return nil
}

func (x *Features) GetCabinMicroclimate() *CabinMicroclimate {
	if x != nil {
		return x.CabinMicroclimate
	}
	return nil
}

func (x *Features) GetElectricOptions() *SetOfElectricOptions {
	if x != nil {
		return x.ElectricOptions
	}
	return nil
}

func (x *Features) GetAirbags() *SetOfAirbags {
	if x != nil {
		return x.Airbags
	}
	return nil
}

func (x *Features) GetMultimediaSystems() *MultimediaSystems {
	if x != nil {
		return x.MultimediaSystems
	}
	return nil
}

func (x *Features) GetCarAlarm() Availability {
	if x != nil {
		return x.CarAlarm
	}
	return Availability_YES_VALUE
}

func (x *Features) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

// SafetyAndMotionControlSystems - электронные системы безопасности и контроля движения
type SafetyAndMotionControlSystems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ABS - наличие антиблокировочной системы (ABS)
	ABS Availability `protobuf:"varint,1,opt,name=ABS,proto3,enum=cars.Availability" json:"ABS,omitempty"`
	// ESP - наличие системы электронного контроля устойчивости (ESP)
	ESP Availability `protobuf:"varint,2,opt,name=ESP,proto3,enum=cars.Availability" json:"ESP,omitempty"`
	// EBD - наличие системы распределения тормозного усилия (EBD)
	EBD Availability `protobuf:"varint,3,opt,name=EBD,proto3,enum=cars.Availability" json:"EBD,omitempty"`
	// BAS - наличие вспомогательной системы торможения (BAS)
	BAS Availability `protobuf:"varint,4,opt,name=BAS,proto3,enum=cars.Availability" json:"BAS,omitempty"`
	// TCS - наличие антипробуксовочной системы (TCS)
	TCS Availability `protobuf:"varint,5,opt,name=TCS,proto3,enum=cars.Availability" json:"TCS,omitempty"`
	// FrontParkingSensor - наличие переднего парктроника
	FrontParkingSensor Availability `protobuf:"varint,6,opt,name=FrontParkingSensor,proto3,enum=cars.Availability" json:"FrontParkingSensor,omitempty"`
	// BackParkingSensor - наличие заднего парктроника
	BackParkingSensor Availability `protobuf:"varint,7,opt,name=BackParkingSensor,proto3,enum=cars.Availability" json:"BackParkingSensor,omitempty"`
	// RearViewCamera - наличие камеры заднего обзора
	RearViewCamera Availability `protobuf:"varint,8,opt,name=RearViewCamera,proto3,enum=cars.Availability" json:"RearViewCamera,omitempty"`
	// CruiseControl - наличие круиз-контроля
	CruiseControl Availability `protobuf:"varint,9,opt,name=CruiseControl,proto3,enum=cars.Availability" json:"CruiseControl,omitempty"`
}

func (x *SafetyAndMotionControlSystems) Reset() {
	*x = SafetyAndMotionControlSystems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafetyAndMotionControlSystems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafetyAndMotionControlSystems) ProtoMessage() {}

func (x *SafetyAndMotionControlSystems) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafetyAndMotionControlSystems.ProtoReflect.Descriptor instead.
func (*SafetyAndMotionControlSystems) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{8}
}

func (x *SafetyAndMotionControlSystems) GetABS() Availability {
	if x != nil {
		return x.ABS
	}
	return Availability_YES_VALUE
}

func (x *SafetyAndMotionControlSystems) GetESP() Availability {
	if x != nil {
		return x.ESP
	}
	return Availability_YES_VALUE
}

func (x *SafetyAndMotionControlSystems) GetEBD() Availability {
	if x != nil {
		return x.EBD
	}
	return Availability_YES_VALUE
}

func (x *SafetyAndMotionControlSystems) GetBAS() Availability {
	if x != nil {
		return x.BAS
	}
	return Availability_YES_VALUE
}

func (x *SafetyAndMotionControlSystems) GetTCS() Availability {
	if x != nil {
		return x.TCS
	}
	return Availability_YES_VALUE
}

func (x *SafetyAndMotionControlSystems) GetFrontParkingSensor() Availability {
	if x != nil {
		return x.FrontParkingSensor
	}
	return Availability_YES_VALUE
}

func (x *SafetyAndMotionControlSystems) GetBackParkingSensor() Availability {
	if x != nil {
		return x.BackParkingSensor
	}
	return Availability_YES_VALUE
}

func (x *SafetyAndMotionControlSystems) GetRearViewCamera() Availability {
	if x != nil {
		return x.RearViewCamera
	}
	return Availability_YES_VALUE
}

func (x *SafetyAndMotionControlSystems) GetCruiseControl() Availability {
	if x != nil {
		return x.CruiseControl
	}
	return Availability_YES_VALUE
}

// Lights - фонари и фары
type Lights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headlights string `protobuf:"bytes,1,opt,name=Headlights,proto3" json:"Headlights,omitempty"`
	// LEDRunningLights - наличие светодиодных ходовых огней
	LEDRunningLights Availability `protobuf:"varint,2,opt,name=LEDRunningLights,proto3,enum=cars.Availability" json:"LEDRunningLights,omitempty"`
	// LEDTailLights - наличие светодиодных задних фонарей
	LEDTailLights Availability `protobuf:"varint,3,opt,name=LEDTailLights,proto3,enum=cars.Availability" json:"LEDTailLights,omitempty"`
	// LightSensor - наличие датчика света
	LightSensor Availability `protobuf:"varint,4,opt,name=LightSensor,proto3,enum=cars.Availability" json:"LightSensor,omitempty"`
	// FrontFogLights - наличие передних противотуманных фар
	FrontFogLights Availability `protobuf:"varint,5,opt,name=FrontFogLights,proto3,enum=cars.Availability" json:"FrontFogLights,omitempty"`
	// BackFogLights - наличие задних противотуманных фонарей
	BackFogLights Availability `protobuf:"varint,6,opt,name=BackFogLights,proto3,enum=cars.Availability" json:"BackFogLights,omitempty"`
}

func (x *Lights) Reset() {
	*x = Lights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lights) ProtoMessage() {}

func (x *Lights) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lights.ProtoReflect.Descriptor instead.
func (*Lights) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{9}
}

func (x *Lights) GetHeadlights() string {
	if x != nil {
		return x.Headlights
	}
	return ""
}

func (x *Lights) GetLEDRunningLights() Availability {
	if x != nil {
		return x.LEDRunningLights
	}
	return Availability_YES_VALUE
}

func (x *Lights) GetLEDTailLights() Availability {
	if x != nil {
		return x.LEDTailLights
	}
	return Availability_YES_VALUE
}

func (x *Lights) GetLightSensor() Availability {
	if x != nil {
		return x.LightSensor
	}
	return Availability_YES_VALUE
}

func (x *Lights) GetFrontFogLights() Availability {
	if x != nil {
		return x.FrontFogLights
	}
	return Availability_YES_VALUE
}

func (x *Lights) GetBackFogLights() Availability {
	if x != nil {
		return x.BackFogLights
	}
	return Availability_YES_VALUE
}

// Interior - интерьер
type Interior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Upholstery - тип обивки салона
	Upholstery string `protobuf:"bytes,1,opt,name=Upholstery,proto3" json:"Upholstery,omitempty"`
}

func (x *Interior) Reset() {
	*x = Interior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interior) ProtoMessage() {}

func (x *Interior) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interior.ProtoReflect.Descriptor instead.
func (*Interior) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{10}
}

func (x *Interior) GetUpholstery() string {
	if x != nil {
		return x.Upholstery
	}
	return ""
}

// CabinMicroclimate - микроклимат салона
type CabinMicroclimate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AirConditioner - наличие кондиционера
	AirConditioner Availability `protobuf:"varint,1,opt,name=AirConditioner,proto3,enum=cars.Availability" json:"AirConditioner,omitempty"`
	// ClimateControl - наличие климат-контроля
	ClimateControl Availability `protobuf:"varint,2,opt,name=ClimateControl,proto3,enum=cars.Availability" json:"ClimateControl,omitempty"`
}

func (x *CabinMicroclimate) Reset() {
	*x = CabinMicroclimate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CabinMicroclimate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CabinMicroclimate) ProtoMessage() {}

func (x *CabinMicroclimate) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CabinMicroclimate.ProtoReflect.Descriptor instead.
func (*CabinMicroclimate) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{11}
}

func (x *CabinMicroclimate) GetAirConditioner() Availability {
	if x != nil {
		return x.AirConditioner
	}
	return Availability_YES_VALUE
}

func (x *CabinMicroclimate) GetClimateControl() Availability {
	if x != nil {
		return x.ClimateControl
	}
	return Availability_YES_VALUE
}

// SetOfElectricOptions - пакет электрических опций
type SetOfElectricOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ElectricFrontSideWindowsLifts - наличие электрических передних стеклоподъемников
	ElectricFrontSideWindowsLifts Availability `protobuf:"varint,1,opt,name=ElectricFrontSideWindowsLifts,proto3,enum=cars.Availability" json:"ElectricFrontSideWindowsLifts,omitempty"`
	// ElectricBackSideWindowsLifts - наличие электрических задних стеклоподъемников
	ElectricBackSideWindowsLifts Availability `protobuf:"varint,2,opt,name=ElectricBackSideWindowsLifts,proto3,enum=cars.Availability" json:"ElectricBackSideWindowsLifts,omitempty"`
	// ElectricHeatingOfFrontSeats - наличие электроподогрева передних сидений
	ElectricHeatingOfFrontSeats Availability `protobuf:"varint,3,opt,name=ElectricHeatingOfFrontSeats,proto3,enum=cars.Availability" json:"ElectricHeatingOfFrontSeats,omitempty"`
	// ElectricHeatingOfBackSeats - наличие электроподогрева задних сидений
	ElectricHeatingOfBackSeats Availability `protobuf:"varint,4,opt,name=ElectricHeatingOfBackSeats,proto3,enum=cars.Availability" json:"ElectricHeatingOfBackSeats,omitempty"`
	// ElectricHeatingOfSteeringWheel - наличие электроподогрева рулевого колеса
	ElectricHeatingOfSteeringWheel Availability `protobuf:"varint,5,opt,name=ElectricHeatingOfSteeringWheel,proto3,enum=cars.Availability" json:"ElectricHeatingOfSteeringWheel,omitempty"`
	// ElectricHeatingOfWindshield - наличие электроподогрева лобового стекла
	ElectricHeatingOfWindshield Availability `protobuf:"varint,6,opt,name=ElectricHeatingOfWindshield,proto3,enum=cars.Availability" json:"ElectricHeatingOfWindshield,omitempty"`
	// ElectricHeatingOfRearWindow -- наличие обогрева заднего стекла
	ElectricHeatingOfRearWindow Availability `protobuf:"varint,7,opt,name=ElectricHeatingOfRearWindow,proto3,enum=cars.Availability" json:"ElectricHeatingOfRearWindow,omitempty"`
	// ElectricHeatingOfSideMirrors - наличие электроподогрева боковых зеркал
	ElectricHeatingOfSideMirrors Availability `protobuf:"varint,8,opt,name=ElectricHeatingOfSideMirrors,proto3,enum=cars.Availability" json:"ElectricHeatingOfSideMirrors,omitempty"`
	// ElectricDriveOfDriverSeat - наличие электропривода водительского сидения
	ElectricDriveOfDriverSeat Availability `protobuf:"varint,9,opt,name=ElectricDriveOfDriverSeat,proto3,enum=cars.Availability" json:"ElectricDriveOfDriverSeat,omitempty"`
	// ElectricDriveOfFrontSeats - наличие электропривода передних сидений
	ElectricDriveOfFrontSeats Availability `protobuf:"varint,10,opt,name=ElectricDriveOfFrontSeats,proto3,enum=cars.Availability" json:"ElectricDriveOfFrontSeats,omitempty"`
	// ElectricDriveOfSideMirrors - наличие электропривода боковых зеркал
	ElectricDriveOfSideMirrors Availability `protobuf:"varint,11,opt,name=ElectricDriveOfSideMirrors,proto3,enum=cars.Availability" json:"ElectricDriveOfSideMirrors,omitempty"`
	// ElectricTrunkOpener - наличие электропривода багажника
	ElectricTrunkOpener Availability `protobuf:"varint,12,opt,name=ElectricTrunkOpener,proto3,enum=cars.Availability" json:"ElectricTrunkOpener,omitempty"`
	// RainSensor - наличие датчика дождя
	RainSensor Availability `protobuf:"varint,13,opt,name=RainSensor,proto3,enum=cars.Availability" json:"RainSensor,omitempty"`
}

func (x *SetOfElectricOptions) Reset() {
	*x = SetOfElectricOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOfElectricOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOfElectricOptions) ProtoMessage() {}

func (x *SetOfElectricOptions) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOfElectricOptions.ProtoReflect.Descriptor instead.
func (*SetOfElectricOptions) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{12}
}

func (x *SetOfElectricOptions) GetElectricFrontSideWindowsLifts() Availability {
	if x != nil {
		return x.ElectricFrontSideWindowsLifts
	}
	return Availability_YES_VALUE
}

func (x *SetOfElectricOptions) GetElectricBackSideWindowsLifts() Availability {
	if x != nil {
		return x.ElectricBackSideWindowsLifts
	}
	return Availability_YES_VALUE
}

func (x *SetOfElectricOptions) GetElectricHeatingOfFrontSeats() Availability {
	if x != nil {
		return x.ElectricHeatingOfFrontSeats
	}
	return Availability_YES_VALUE
}

func (x *SetOfElectricOptions) GetElectricHeatingOfBackSeats() Availability {
	if x != nil {
		return x.ElectricHeatingOfBackSeats
	}
	return Availability_YES_VALUE
}

func (x *SetOfElectricOptions) GetElectricHeatingOfSteeringWheel() Availability {
	if x != nil {
		return x.ElectricHeatingOfSteeringWheel
	}
	return Availability_YES_VALUE
}

func (x *SetOfElectricOptions) GetElectricHeatingOfWindshield() Availability {
	if x != nil {
		return x.ElectricHeatingOfWindshield
	}
	return Availability_YES_VALUE
}

func (x *SetOfElectricOptions) GetElectricHeatingOfRearWindow() Availability {
	if x != nil {
		return x.ElectricHeatingOfRearWindow
	}
	return Availability_YES_VALUE
}

func (x *SetOfElectricOptions) GetElectricHeatingOfSideMirrors() Availability {
	if x != nil {
		return x.ElectricHeatingOfSideMirrors
	}
	return Availability_YES_VALUE
}

func (x *SetOfElectricOptions) GetElectricDriveOfDriverSeat() Availability {
	if x != nil {
		return x.ElectricDriveOfDriverSeat
	}
	return Availability_YES_VALUE
}

func (x *SetOfElectricOptions) GetElectricDriveOfFrontSeats() Availability {
	if x != nil {
		return x.ElectricDriveOfFrontSeats
	}
	return Availability_YES_VALUE
}

func (x *SetOfElectricOptions) GetElectricDriveOfSideMirrors() Availability {
	if x != nil {
		return x.ElectricDriveOfSideMirrors
	}
	return Availability_YES_VALUE
}

func (x *SetOfElectricOptions) GetElectricTrunkOpener() Availability {
	if x != nil {
		return x.ElectricTrunkOpener
	}
	return Availability_YES_VALUE
}

func (x *SetOfElectricOptions) GetRainSensor() Availability {
	if x != nil {
		return x.RainSensor
	}
	return Availability_YES_VALUE
}

// SetOfAirbags - подушки безопасности
type SetOfAirbags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DriverAirbag - наличие водительской подушки безопасности
	DriverAirbag Availability `protobuf:"varint,1,opt,name=DriverAirbag,proto3,enum=cars.Availability" json:"DriverAirbag,omitempty"`
	// FrontPassengerAirbag - наличие подушки безопасности переднего пассажира
	FrontPassengerAirbag Availability `protobuf:"varint,2,opt,name=FrontPassengerAirbag,proto3,enum=cars.Availability" json:"FrontPassengerAirbag,omitempty"`
	// SideAirbags - наличие боковых подушек безопасности
	SideAirbags Availability `protobuf:"varint,3,opt,name=SideAirbags,proto3,enum=cars.Availability" json:"SideAirbags,omitempty"`
	// CurtainAirbags - наличие подушек безопасности-шторок
	CurtainAirbags Availability `protobuf:"varint,4,opt,name=CurtainAirbags,proto3,enum=cars.Availability" json:"CurtainAirbags,omitempty"`
}

func (x *SetOfAirbags) Reset() {
	*x = SetOfAirbags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOfAirbags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOfAirbags) ProtoMessage() {}

func (x *SetOfAirbags) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOfAirbags.ProtoReflect.Descriptor instead.
func (*SetOfAirbags) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{13}
}

func (x *SetOfAirbags) GetDriverAirbag() Availability {
	if x != nil {
		return x.DriverAirbag
	}
	return Availability_YES_VALUE
}

func (x *SetOfAirbags) GetFrontPassengerAirbag() Availability {
	if x != nil {
		return x.FrontPassengerAirbag
	}
	return Availability_YES_VALUE
}

func (x *SetOfAirbags) GetSideAirbags() Availability {
	if x != nil {
		return x.SideAirbags
	}
	return Availability_YES_VALUE
}

func (x *SetOfAirbags) GetCurtainAirbags() Availability {
	if x != nil {
		return x.CurtainAirbags
	}
	return Availability_YES_VALUE
}

// MultimediaSystems - системы мультимедиа
type MultimediaSystems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OnBoardComputer - наличие бортового компьютера
	OnBoardComputer Availability `protobuf:"varint,1,opt,name=OnBoardComputer,proto3,enum=cars.Availability" json:"OnBoardComputer,omitempty"`
	// MP3Support - наличие поддержки MP3
	MP3Support Availability `protobuf:"varint,2,opt,name=MP3Support,proto3,enum=cars.Availability" json:"MP3Support,omitempty"`
	// HandsFreeSupport - наличие поддержки Hands free
	HandsFreeSupport Availability `protobuf:"varint,3,opt,name=HandsFreeSupport,proto3,enum=cars.Availability" json:"HandsFreeSupport,omitempty"`
}

func (x *MultimediaSystems) Reset() {
	*x = MultimediaSystems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultimediaSystems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultimediaSystems) ProtoMessage() {}

func (x *MultimediaSystems) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultimediaSystems.ProtoReflect.Descriptor instead.
func (*MultimediaSystems) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{14}
}

func (x *MultimediaSystems) GetOnBoardComputer() Availability {
	if x != nil {
		return x.OnBoardComputer
	}
	return Availability_YES_VALUE
}

func (x *MultimediaSystems) GetMP3Support() Availability {
	if x != nil {
		return x.MP3Support
	}
	return Availability_YES_VALUE
}

func (x *MultimediaSystems) GetHandsFreeSupport() Availability {
	if x != nil {
		return x.HandsFreeSupport
	}
	return Availability_YES_VALUE
}

// Offering - сведения для покупателя
type Offering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price - цена, руб
	Price string `protobuf:"bytes,1,opt,name=Price,proto3" json:"Price,omitempty"`
	// Year - год выпуска
	Year int32 `protobuf:"varint,2,opt,name=Year,proto3" json:"Year,omitempty"`
	// Kilometrage - пробег, км
	Kilometrage string `protobuf:"bytes,3,opt,name=Kilometrage,proto3" json:"Kilometrage,omitempty"`
	// PhotoURLs - фотографии
	PhotoURLs []string `protobuf:"bytes,4,rep,name=PhotoURLs,proto3" json:"PhotoURLs,omitempty"`
}

func (x *Offering) Reset() {
	*x = Offering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cars_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offering) ProtoMessage() {}

func (x *Offering) ProtoReflect() protoreflect.Message {
	mi := &file_cars_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offering.ProtoReflect.Descriptor instead.
func (*Offering) Descriptor() ([]byte, []int) {
	return file_cars_proto_rawDescGZIP(), []int{15}
}

func (x *Offering) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Offering) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Offering) GetKilometrage() string {
	if x != nil {
		return x.Kilometrage
	}
	return ""
}

func (x *Offering) GetPhotoURLs() []string {
	if x != nil {
		return x.PhotoURLs
	}
	return nil
}

var File_cars_proto protoreflect.FileDescriptor

var file_cars_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x61,
	0x72, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x03, 0x43, 0x61, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x69, 0x6d,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x69,
	0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x63, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x53, 0x70, 0x65,
	0x63, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x08, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xae, 0x07, 0x0a, 0x0e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x44, 0x72, 0x61, 0x67,
	0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x42,
	0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x62, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x54, 0x6f, 0x31, 0x30,
	0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x54, 0x6f, 0x31, 0x30, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x4d,
	0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x4d,
	0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x69, 0x74, 0x79, 0x46,
	0x75, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x43, 0x69, 0x74, 0x79, 0x46, 0x75, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x48, 0x69, 0x67,
	0x68, 0x77, 0x61, 0x79, 0x46, 0x75, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x48, 0x69, 0x67, 0x68, 0x77,
	0x61, 0x79, 0x46, 0x75, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x46, 0x75, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x14, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x46, 0x75, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x53, 0x65, 0x61, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x54,
	0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4d, 0x61, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x4d, 0x61, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x65, 0x61, 0x72, 0x62, 0x6f, 0x78, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x47, 0x65, 0x61, 0x72, 0x62, 0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x72, 0x61, 0x73, 0x68, 0x54, 0x65, 0x73, 0x74, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x43, 0x72,
	0x61, 0x73, 0x68, 0x54, 0x65, 0x73, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x06, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x61, 0x72, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65,
	0x6c, 0x52, 0x0d, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65, 0x6c,
	0x12, 0x30, 0x0a, 0x0a, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x73,
	0x52, 0x06, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x54, 0x69, 0x72, 0x65,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x54,
	0x69, 0x72, 0x65, 0x73, 0x52, 0x05, 0x54, 0x69, 0x72, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x06,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x75, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61,
	0x78, 0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d,
	0x61, 0x78, 0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x12, 0x51, 0x0a, 0x15, 0x53, 0x74,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x61, 0x72, 0x73,
	0x2e, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x57, 0x68, 0x65, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x0d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xd8, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0f, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x42,
	0x61, 0x63, 0x6b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x72,
	0x61, 0x6b, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x05, 0x54, 0x69, 0x72, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x69, 0x72, 0x65, 0x73, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x69, 0x72,
	0x65, 0x73, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x54,
	0x69, 0x72, 0x65, 0x73, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x72, 0x65, 0x73, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x34, 0x0a, 0x15, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x69, 0x72, 0x65, 0x73, 0x41, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x69, 0x72, 0x65, 0x73, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x72,
	0x65, 0x73, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x72, 0x65, 0x73, 0x41, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x54, 0x69, 0x72, 0x65, 0x73, 0x52, 0x69, 0x6d, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x54,
	0x69, 0x72, 0x65, 0x73, 0x52, 0x69, 0x6d, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x14, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x72, 0x65, 0x73, 0x52, 0x69, 0x6d, 0x44,
	0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x42,
	0x61, 0x63, 0x6b, 0x54, 0x69, 0x72, 0x65, 0x73, 0x52, 0x69, 0x6d, 0x44, 0x69, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x22, 0x8d, 0x04, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x67, 0x0a, 0x1c, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x53, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x1c, 0x53, 0x61, 0x66,
	0x65, 0x74, 0x79, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x06, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x61, 0x72, 0x73,
	0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x06, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x72, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x43,
	0x61, 0x62, 0x69, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x43, 0x61,
	0x62, 0x69, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52,
	0x11, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x63, 0x6c, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x61,
	0x72, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x66, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x41, 0x69, 0x72, 0x62,
	0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x4f, 0x66, 0x41, 0x69, 0x72, 0x62, 0x61, 0x67, 0x73, 0x52, 0x07, 0x41,
	0x69, 0x72, 0x62, 0x61, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x11, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2e, 0x0a,
	0x08, 0x43, 0x61, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x43, 0x61, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0xd9, 0x03, 0x0a, 0x1d, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x41, 0x6e,
	0x64, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x03, 0x41, 0x42, 0x53, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x03, 0x41, 0x42, 0x53, 0x12, 0x24, 0x0a, 0x03, 0x45,
	0x53, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x03, 0x45, 0x53,
	0x50, 0x12, 0x24, 0x0a, 0x03, 0x45, 0x42, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x03, 0x45, 0x42, 0x44, 0x12, 0x24, 0x0a, 0x03, 0x42, 0x41, 0x53, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x03, 0x42, 0x41, 0x53, 0x12, 0x24, 0x0a,
	0x03, 0x54, 0x43, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72,
	0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x03,
	0x54, 0x43, 0x53, 0x12, 0x42, 0x0a, 0x12, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x12, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x11, 0x42, 0x61, 0x63, 0x6b, 0x50,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x11, 0x42, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x52, 0x65, 0x61,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x52, 0x65, 0x61, 0x72, 0x56, 0x69, 0x65, 0x77, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x38, 0x0a, 0x0d, 0x43, 0x72, 0x75, 0x69, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63,
	0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0d, 0x43, 0x72, 0x75, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22,
	0xce, 0x02, 0x0a, 0x06, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x48, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x4c, 0x45,
	0x44, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x10, 0x4c, 0x45, 0x44, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x4c, 0x45,
	0x44, 0x54, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x4c, 0x45, 0x44, 0x54, 0x61, 0x69, 0x6c, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x46, 0x6f, 0x67, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x46, 0x6f, 0x67,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x46, 0x6f,
	0x67, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x46, 0x6f, 0x67, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x22, 0x2a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x55, 0x70, 0x68, 0x6f, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x55, 0x70, 0x68, 0x6f, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x79, 0x22, 0x8b, 0x01, 0x0a,
	0x11, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x63, 0x6c, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x41, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72,
	0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e,
	0x41, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x43, 0x6c, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0xc4, 0x08, 0x0a, 0x14, 0x53,
	0x65, 0x74, 0x4f, 0x66, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x1d, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4c,
	0x69, 0x66, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72,
	0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x1d,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x64,
	0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4c, 0x69, 0x66, 0x74, 0x73, 0x12, 0x56, 0x0a,
	0x1c, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x64,
	0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4c, 0x69, 0x66, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x1c, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x42, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x4c, 0x69, 0x66, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x1b, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x53,
	0x65, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72,
	0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x1b,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4f,
	0x66, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x1a, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66,
	0x42, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x1a, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x48, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x42, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12,
	0x5a, 0x0a, 0x1e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x66, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x1e, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x53, 0x74,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x12, 0x54, 0x0a, 0x1b, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66,
	0x57, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x1b, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x48, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x57, 0x69, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x54, 0x0a, 0x1b, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x48, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x52, 0x65, 0x61, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x1b, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x52, 0x65, 0x61,
	0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x56, 0x0a, 0x1c, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x53, 0x69, 0x64, 0x65,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x1c, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x4f, 0x66, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x50, 0x0a, 0x19, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x4f, 0x66, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x19, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x61,
	0x74, 0x12, 0x50, 0x0a, 0x19, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x4f, 0x66, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x19, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x53, 0x65,
	0x61, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x1a, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x1a, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x66, 0x53, 0x69, 0x64, 0x65,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x0a, 0x52, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x52, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x22, 0x80, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x4f, 0x66, 0x41, 0x69, 0x72, 0x62, 0x61,
	0x67, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x41, 0x69, 0x72, 0x62,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x41, 0x69, 0x72, 0x62, 0x61, 0x67, 0x12, 0x46, 0x0a, 0x14, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x41, 0x69, 0x72, 0x62,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x14, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x41, 0x69, 0x72, 0x62,
	0x61, 0x67, 0x12, 0x34, 0x0a, 0x0b, 0x53, 0x69, 0x64, 0x65, 0x41, 0x69, 0x72, 0x62, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x53, 0x69, 0x64,
	0x65, 0x41, 0x69, 0x72, 0x62, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x74,
	0x61, 0x69, 0x6e, 0x41, 0x69, 0x72, 0x62, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x43, 0x75, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x41, 0x69, 0x72,
	0x62, 0x61, 0x67, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x4f, 0x6e,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x4f, 0x6e, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x4d, 0x50, 0x33, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63,
	0x61, 0x72, 0x73, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0a, 0x4d, 0x50, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x10,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x46, 0x72, 0x65, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x10, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x74, 0x0a, 0x08,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4b, 0x69, 0x6c, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x69, 0x6c, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x52, 0x4c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x52,
	0x4c, 0x73, 0x2a, 0x47, 0x0a, 0x15, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x68,
	0x65, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x4c,
	0x45, 0x46, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x10, 0x02, 0x2a, 0x68, 0x0a, 0x0d, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x4f, 0x48, 0x59, 0x44, 0x52, 0x41, 0x55, 0x4c, 0x49,
	0x43, 0x5f, 0x50, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x59, 0x44, 0x52, 0x41, 0x55,
	0x4c, 0x49, 0x43, 0x5f, 0x50, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x5f, 0x50,
	0x53, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x50, 0x53, 0x10, 0x04, 0x2a, 0x52, 0x0a, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x59, 0x45, 0x53, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x03, 0x42, 0x35, 0x5a, 0x33, 0x63, 0x61, 0x72,
	0x2d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x63, 0x61, 0x72, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cars_proto_rawDescOnce sync.Once
	file_cars_proto_rawDescData = file_cars_proto_rawDesc
)

func file_cars_proto_rawDescGZIP() []byte {
	file_cars_proto_rawDescOnce.Do(func() {
		file_cars_proto_rawDescData = protoimpl.X.CompressGZIP(file_cars_proto_rawDescData)
	})
	return file_cars_proto_rawDescData
}

var file_cars_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cars_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_cars_proto_goTypes = []interface{}{
	(SteeringWheelPosition)(0),            // 0: cars.SteeringWheelPosition
	(PowerSteering)(0),                    // 1: cars.PowerSteering
	(Availability)(0),                     // 2: cars.Availability
	(*Car)(nil),                           // 3: cars.Car
	(*Specifications)(nil),                // 4: cars.Specifications
	(*Engine)(nil),                        // 5: cars.Engine
	(*SteeringWheel)(nil),                 // 6: cars.SteeringWheel
	(*Suspension)(nil),                    // 7: cars.Suspension
	(*Brakes)(nil),                        // 8: cars.Brakes
	(*Tires)(nil),                         // 9: cars.Tires
	(*Features)(nil),                      // 10: cars.Features
	(*SafetyAndMotionControlSystems)(nil), // 11: cars.SafetyAndMotionControlSystems
	(*Lights)(nil),                        // 12: cars.Lights
	(*Interior)(nil),                      // 13: cars.Interior
	(*CabinMicroclimate)(nil),             // 14: cars.CabinMicroclimate
	(*SetOfElectricOptions)(nil),          // 15: cars.SetOfElectricOptions
	(*SetOfAirbags)(nil),                  // 16: cars.SetOfAirbags
	(*MultimediaSystems)(nil),             // 17: cars.MultimediaSystems
	(*Offering)(nil),                      // 18: cars.Offering
}
var file_cars_proto_depIdxs = []int32{
	4,  // 0: cars.Car.Specs:type_name -> cars.Specifications
	10, // 1: cars.Car.Features:type_name -> cars.Features
	18, // 2: cars.Car.Offering:type_name -> cars.Offering
	5,  // 3: cars.Specifications.Engine:type_name -> cars.Engine
	6,  // 4: cars.Specifications.SteeringWheel:type_name -> cars.SteeringWheel
	7,  // 5: cars.Specifications.Suspension:type_name -> cars.Suspension
	8,  // 6: cars.Specifications.Brakes:type_name -> cars.Brakes
	9,  // 7: cars.Specifications.Tires:type_name -> cars.Tires
	0,  // 8: cars.SteeringWheel.SteeringWheelPosition:type_name -> cars.SteeringWheelPosition
	1,  // 9: cars.SteeringWheel.PowerSteering:type_name -> cars.PowerSteering
	2,  // 10: cars.Suspension.FrontStabilizer:type_name -> cars.Availability
	2,  // 11: cars.Suspension.BackStabilizer:type_name -> cars.Availability
	11, // 12: cars.Features.SafetyAndMotionControlSystem:type_name -> cars.SafetyAndMotionControlSystems
	12, // 13: cars.Features.Lights:type_name -> cars.Lights
	13, // 14: cars.Features.Interior:type_name -> cars.Interior
	14, // 15: cars.Features.CabinMicroclimate:type_name -> cars.CabinMicroclimate
	15, // 16: cars.Features.ElectricOptions:type_name -> cars.SetOfElectricOptions
	16, // 17: cars.Features.Airbags:type_name -> cars.SetOfAirbags
	17, // 18: cars.Features.MultimediaSystems:type_name -> cars.MultimediaSystems
	2,  // 19: cars.Features.CarAlarm:type_name -> cars.Availability
	2,  // 20: cars.SafetyAndMotionControlSystems.ABS:type_name -> cars.Availability
	2,  // 21: cars.SafetyAndMotionControlSystems.ESP:type_name -> cars.Availability
	2,  // 22: cars.SafetyAndMotionControlSystems.EBD:type_name -> cars.Availability
	2,  // 23: cars.SafetyAndMotionControlSystems.BAS:type_name -> cars.Availability
	2,  // 24: cars.SafetyAndMotionControlSystems.TCS:type_name -> cars.Availability
	2,  // 25: cars.SafetyAndMotionControlSystems.FrontParkingSensor:type_name -> cars.Availability
	2,  // 26: cars.SafetyAndMotionControlSystems.BackParkingSensor:type_name -> cars.Availability
	2,  // 27: cars.SafetyAndMotionControlSystems.RearViewCamera:type_name -> cars.Availability
	2,  // 28: cars.SafetyAndMotionControlSystems.CruiseControl:type_name -> cars.Availability
	2,  // 29: cars.Lights.LEDRunningLights:type_name -> cars.Availability
	2,  // 30: cars.Lights.LEDTailLights:type_name -> cars.Availability
	2,  // 31: cars.Lights.LightSensor:type_name -> cars.Availability
	2,  // 32: cars.Lights.FrontFogLights:type_name -> cars.Availability
	2,  // 33: cars.Lights.BackFogLights:type_name -> cars.Availability
	2,  // 34: cars.CabinMicroclimate.AirConditioner:type_name -> cars.Availability
	2,  // 35: cars.CabinMicroclimate.ClimateControl:type_name -> cars.Availability
	2,  // 36: cars.SetOfElectricOptions.ElectricFrontSideWindowsLifts:type_name -> cars.Availability
	2,  // 37: cars.SetOfElectricOptions.ElectricBackSideWindowsLifts:type_name -> cars.Availability
	2,  // 38: cars.SetOfElectricOptions.ElectricHeatingOfFrontSeats:type_name -> cars.Availability
	2,  // 39: cars.SetOfElectricOptions.ElectricHeatingOfBackSeats:type_name -> cars.Availability
	2,  // 40: cars.SetOfElectricOptions.ElectricHeatingOfSteeringWheel:type_name -> cars.Availability
	2,  // 41: cars.SetOfElectricOptions.ElectricHeatingOfWindshield:type_name -> cars.Availability
	2,  // 42: cars.SetOfElectricOptions.ElectricHeatingOfRearWindow:type_name -> cars.Availability
	2,  // 43: cars.SetOfElectricOptions.ElectricHeatingOfSideMirrors:type_name -> cars.Availability
	2,  // 44: cars.SetOfElectricOptions.ElectricDriveOfDriverSeat:type_name -> cars.Availability
	2,  // 45: cars.SetOfElectricOptions.ElectricDriveOfFrontSeats:type_name -> cars.Availability
	2,  // 46: cars.SetOfElectricOptions.ElectricDriveOfSideMirrors:type_name -> cars.Availability
	2,  // 47: cars.SetOfElectricOptions.ElectricTrunkOpener:type_name -> cars.Availability
	2,  // 48: cars.SetOfElectricOptions.RainSensor:type_name -> cars.Availability
	2,  // 49: cars.SetOfAirbags.DriverAirbag:type_name -> cars.Availability
	2,  // 50: cars.SetOfAirbags.FrontPassengerAirbag:type_name -> cars.Availability
	2,  // 51: cars.SetOfAirbags.SideAirbags:type_name -> cars.Availability
	2,  // 52: cars.SetOfAirbags.CurtainAirbags:type_name -> cars.Availability
	2,  // 53: cars.MultimediaSystems.OnBoardComputer:type_name -> cars.Availability
	2,  // 54: cars.MultimediaSystems.MP3Support:type_name -> cars.Availability
	2,  // 55: cars.MultimediaSystems.HandsFreeSupport:type_name -> cars.Availability
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_cars_proto_init() }
func file_cars_proto_init() {
	if File_cars_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cars_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Car); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Engine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteeringWheel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Suspension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Brakes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tires); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Features); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafetyAndMotionControlSystems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CabinMicroclimate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOfElectricOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOfAirbags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultimediaSystems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cars_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cars_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cars_proto_goTypes,
		DependencyIndexes: file_cars_proto_depIdxs,
		EnumInfos:         file_cars_proto_enumTypes,
		MessageInfos:      file_cars_proto_msgTypes,
	}.Build()
	File_cars_proto = out.File
	file_cars_proto_rawDesc = nil
	file_cars_proto_goTypes = nil
	file_cars_proto_depIdxs = nil
}
